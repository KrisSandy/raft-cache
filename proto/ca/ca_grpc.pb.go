// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/ca/ca.proto

package ca

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CacheAdmin_GetLeader_FullMethodName        = "/ca.CacheAdmin/GetLeader"
	CacheAdmin_GetConfiguration_FullMethodName = "/ca.CacheAdmin/GetConfiguration"
	CacheAdmin_GetState_FullMethodName         = "/ca.CacheAdmin/GetState"
	CacheAdmin_AddVoter_FullMethodName         = "/ca.CacheAdmin/AddVoter"
	CacheAdmin_AddNonVoter_FullMethodName      = "/ca.CacheAdmin/AddNonVoter"
	CacheAdmin_RemovePeer_FullMethodName       = "/ca.CacheAdmin/RemovePeer"
	CacheAdmin_PromotePeer_FullMethodName      = "/ca.CacheAdmin/PromotePeer"
)

// CacheAdminClient is the client API for CacheAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CacheAdminClient interface {
	GetLeader(ctx context.Context, in *LeaderRequest, opts ...grpc.CallOption) (*LeaderResponse, error)
	GetConfiguration(ctx context.Context, in *ConfigurationRequest, opts ...grpc.CallOption) (*ConfigurationResponse, error)
	GetState(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*StateResponse, error)
	AddVoter(ctx context.Context, in *AddVoterRequest, opts ...grpc.CallOption) (*AddVoterResponse, error)
	AddNonVoter(ctx context.Context, in *AddNonVoterRequest, opts ...grpc.CallOption) (*AddNonVoterResponse, error)
	RemovePeer(ctx context.Context, in *RemovePeerRequest, opts ...grpc.CallOption) (*RemovePeerResponse, error)
	PromotePeer(ctx context.Context, in *PromotePeerRequest, opts ...grpc.CallOption) (*PromotePeerResponse, error)
}

type cacheAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewCacheAdminClient(cc grpc.ClientConnInterface) CacheAdminClient {
	return &cacheAdminClient{cc}
}

func (c *cacheAdminClient) GetLeader(ctx context.Context, in *LeaderRequest, opts ...grpc.CallOption) (*LeaderResponse, error) {
	out := new(LeaderResponse)
	err := c.cc.Invoke(ctx, CacheAdmin_GetLeader_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheAdminClient) GetConfiguration(ctx context.Context, in *ConfigurationRequest, opts ...grpc.CallOption) (*ConfigurationResponse, error) {
	out := new(ConfigurationResponse)
	err := c.cc.Invoke(ctx, CacheAdmin_GetConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheAdminClient) GetState(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*StateResponse, error) {
	out := new(StateResponse)
	err := c.cc.Invoke(ctx, CacheAdmin_GetState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheAdminClient) AddVoter(ctx context.Context, in *AddVoterRequest, opts ...grpc.CallOption) (*AddVoterResponse, error) {
	out := new(AddVoterResponse)
	err := c.cc.Invoke(ctx, CacheAdmin_AddVoter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheAdminClient) AddNonVoter(ctx context.Context, in *AddNonVoterRequest, opts ...grpc.CallOption) (*AddNonVoterResponse, error) {
	out := new(AddNonVoterResponse)
	err := c.cc.Invoke(ctx, CacheAdmin_AddNonVoter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheAdminClient) RemovePeer(ctx context.Context, in *RemovePeerRequest, opts ...grpc.CallOption) (*RemovePeerResponse, error) {
	out := new(RemovePeerResponse)
	err := c.cc.Invoke(ctx, CacheAdmin_RemovePeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheAdminClient) PromotePeer(ctx context.Context, in *PromotePeerRequest, opts ...grpc.CallOption) (*PromotePeerResponse, error) {
	out := new(PromotePeerResponse)
	err := c.cc.Invoke(ctx, CacheAdmin_PromotePeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CacheAdminServer is the server API for CacheAdmin service.
// All implementations must embed UnimplementedCacheAdminServer
// for forward compatibility
type CacheAdminServer interface {
	GetLeader(context.Context, *LeaderRequest) (*LeaderResponse, error)
	GetConfiguration(context.Context, *ConfigurationRequest) (*ConfigurationResponse, error)
	GetState(context.Context, *StateRequest) (*StateResponse, error)
	AddVoter(context.Context, *AddVoterRequest) (*AddVoterResponse, error)
	AddNonVoter(context.Context, *AddNonVoterRequest) (*AddNonVoterResponse, error)
	RemovePeer(context.Context, *RemovePeerRequest) (*RemovePeerResponse, error)
	PromotePeer(context.Context, *PromotePeerRequest) (*PromotePeerResponse, error)
	mustEmbedUnimplementedCacheAdminServer()
}

// UnimplementedCacheAdminServer must be embedded to have forward compatible implementations.
type UnimplementedCacheAdminServer struct {
}

func (UnimplementedCacheAdminServer) GetLeader(context.Context, *LeaderRequest) (*LeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeader not implemented")
}
func (UnimplementedCacheAdminServer) GetConfiguration(context.Context, *ConfigurationRequest) (*ConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfiguration not implemented")
}
func (UnimplementedCacheAdminServer) GetState(context.Context, *StateRequest) (*StateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedCacheAdminServer) AddVoter(context.Context, *AddVoterRequest) (*AddVoterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVoter not implemented")
}
func (UnimplementedCacheAdminServer) AddNonVoter(context.Context, *AddNonVoterRequest) (*AddNonVoterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNonVoter not implemented")
}
func (UnimplementedCacheAdminServer) RemovePeer(context.Context, *RemovePeerRequest) (*RemovePeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePeer not implemented")
}
func (UnimplementedCacheAdminServer) PromotePeer(context.Context, *PromotePeerRequest) (*PromotePeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromotePeer not implemented")
}
func (UnimplementedCacheAdminServer) mustEmbedUnimplementedCacheAdminServer() {}

// UnsafeCacheAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CacheAdminServer will
// result in compilation errors.
type UnsafeCacheAdminServer interface {
	mustEmbedUnimplementedCacheAdminServer()
}

func RegisterCacheAdminServer(s grpc.ServiceRegistrar, srv CacheAdminServer) {
	s.RegisterService(&CacheAdmin_ServiceDesc, srv)
}

func _CacheAdmin_GetLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheAdminServer).GetLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheAdmin_GetLeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheAdminServer).GetLeader(ctx, req.(*LeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheAdmin_GetConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheAdminServer).GetConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheAdmin_GetConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheAdminServer).GetConfiguration(ctx, req.(*ConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheAdmin_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheAdminServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheAdmin_GetState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheAdminServer).GetState(ctx, req.(*StateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheAdmin_AddVoter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVoterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheAdminServer).AddVoter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheAdmin_AddVoter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheAdminServer).AddVoter(ctx, req.(*AddVoterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheAdmin_AddNonVoter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNonVoterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheAdminServer).AddNonVoter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheAdmin_AddNonVoter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheAdminServer).AddNonVoter(ctx, req.(*AddNonVoterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheAdmin_RemovePeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheAdminServer).RemovePeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheAdmin_RemovePeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheAdminServer).RemovePeer(ctx, req.(*RemovePeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheAdmin_PromotePeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromotePeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheAdminServer).PromotePeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheAdmin_PromotePeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheAdminServer).PromotePeer(ctx, req.(*PromotePeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CacheAdmin_ServiceDesc is the grpc.ServiceDesc for CacheAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CacheAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ca.CacheAdmin",
	HandlerType: (*CacheAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLeader",
			Handler:    _CacheAdmin_GetLeader_Handler,
		},
		{
			MethodName: "GetConfiguration",
			Handler:    _CacheAdmin_GetConfiguration_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _CacheAdmin_GetState_Handler,
		},
		{
			MethodName: "AddVoter",
			Handler:    _CacheAdmin_AddVoter_Handler,
		},
		{
			MethodName: "AddNonVoter",
			Handler:    _CacheAdmin_AddNonVoter_Handler,
		},
		{
			MethodName: "RemovePeer",
			Handler:    _CacheAdmin_RemovePeer_Handler,
		},
		{
			MethodName: "PromotePeer",
			Handler:    _CacheAdmin_PromotePeer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ca/ca.proto",
}
